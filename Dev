#!/usr/bin/env bash

set -euo pipefail

readonly red=$(tput setaf 1)
readonly green=$(tput setaf 2)
readonly cyan=$(tput setaf 6)
readonly yellow=$(tput setaf 3)
readonly magenta=$(tput setaf 5)
readonly reset=$(tput sgr0)

readonly Check=$'\xE2\x9C\x94'

Success() { printf "${green}%s${reset}\n" "$*"; }
Info() { printf "${cyan}%s${reset}\n" "$*"; }
Warning() { printf "${yellow}%s${reset}\n" "$*"; }
Error() { printf "${red}%s${reset}\n" "$*" >&2; }
Divide() { printf "\n${magenta}----------${reset}\n\n"; }

Install() {
    local commandName="$1"
    local secondArg="${2:-}"

    if command -v "$commandName" &>/dev/null; then
        Success "$commandName $Check"
        return
    fi

    Info "Installing $commandName ..."

    if [[ -n "$secondArg" ]]; then
        if declare -f "$secondArg" &>/dev/null; then
            "$secondArg" || Error "Failed to install $commandName"
        else
            sudo apt-get install -y "$secondArg" || Error "Failed to install $commandName"
        fi
    else
        sudo apt-get install -y "$commandName" || Error "Failed to install $commandName"
    fi

    Success "Installed $commandName"
}

function IsFullStackDeveloper()
{
    if [[ "$DeveloperRole" == "FullStack" ]]; then
        return 0;
    fi
    return 1;
}

function ConfigureApt()
{
    echo "Acquire::http::Timeout \"5\";" | sudo tee /etc/apt/apt.conf.d/99timeout >/dev/null 2>&1
    sudo sed -i 's/ir\.archive\.ubuntu\.com/archive.ubuntu.com/g' /etc/apt/sources.list.d/ubuntu.sources
}

function InstallChrome() {
    Info "Chrome here"
    curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo tee /usr/share/keyrings/google-chrome.gpg > /dev/null
    echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y google-chrome-stable
}

function InstallVsCode() {
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
    sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
    sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
    rm -f packages.microsoft.gpg

    sudo apt-get update
    sudo apt-get install -y apt-transport-https code
}

function InstallVsCodeExtensionRemoteContainers()
{
    if code --list-extensions | grep -q 'ms-vscode-remote.remote-containers'; then
        timeout 50s code --install-extension ms-vscode-remote.remote-containers --force 2>&1 >/dev/null && \
        Success "Remote Containers Extension $Check" || \
        Warning "Remote Containers Extension update timed out"
        return
    fi

    Info "Installing Remote Containers Extension..."

    timeout 50s code --install-extension ms-vscode-remote.remote-containers && \
    Success "Installed Remote Containers Extension" || \
    Warning "Failed to install Remote Containers Extension"
}

function InstallVsCodeExtensionCodeSpellChecker()
{
    if code --list-extensions | grep -q 'streetsidesoftware.code-spell-checker'; then
        timeout 50s code --install-extension streetsidesoftware.code-spell-checker --force 2>&1 >/dev/null && \
        Success "Code Spell Checker Extension $Check" || \
        Warning "Code Spell Checker Extension update timed out"
        return
    fi

    Info "Installing Code Spell Checker Extension..."

    timeout 50s code --install-extension streetsidesoftware.code-spell-checker && \
    Success "Installed Code Spell Checker Extension" || \
    Warning "Failed to install Code Spell Checker Extension"
}

function InstallRemmin() {
    sudo apt-get install -y remmina remmina-plugin-rdp
}

function InstallAzureDataStudio() {
    wget -O /Temp/ads.deb "https://go.microsoft.com/fwlink/?linkid=2251736"
    sudo apt-get install -y /Temp/ads.deb
    rm -f /Temp/ads.deb
}

function InstallMongoCompass()
{
    echo "Finding latest MongoDB Compass version..."
    latestUrl=$(curl -sL https://www.mongodb.com/try/download/compass | grep -oP 'https://downloads.mongodb.com/compass/mongodb-compass_[^"]+_amd64.deb' | head -n 1)

    if [ -z "$latestUrl" ]; then
        echo "Could not find the latest MongoDB Compass .deb URL."
        exit 1
    fi

    echo "Downloading MongoDB Compass from $latestUrl..."
    wget "$latestUrl" -O mongodb-compass.deb
    if [ $? -eq 0 ]; then
        echo "Download completed successfully."
    else
        echo "Failed to download MongoDB Compass. Please check your internet connection."
        exit 1
    fi

    echo "Installing MongoDB Compass..."
    sudo dpkg -i mongodb-compass.deb
    echo "Fixing dependencies..."
    sudo apt-get install -f -y
    echo "Cleaning up..."
    rm mongodb-compass.deb
    echo "MongoDB Compass installation complete! You can launch it by typing 'mongodb-compass' or searching for it in your application menu."
}

function InstallAzureCli() {
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
}

function InstallGit() {
    sudo apt-get install -y git
    git config --global init.defaultBranch main
}

function InstallGitHubCli() {
    sudo mkdir -p -m 755 /etc/apt/keyrings
    wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
    sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y gh
}

function InstallDocker() {
    sudo apt-get update
    sudo apt-get install -y ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
}

function InstallRustDesk() {
    wget https://github.com/rustdesk/rustdesk/releases/download/1.2.3-2/rustdesk-1.2.3-2-x86_64.deb -O /Temp/RustDesk.deb
    sudo chmod +x /Temp/RustDesk.deb
    sudo apt-get install -y /Temp/RustDesk.deb
    sudo rm -f /Temp/RustDesk.deb
}

function InstallAnydesk() {
    curl -fsSL https://keys.anydesk.com/repos/DEB-GPG-KEY | sudo tee /usr/share/keyrings/anydesk.gpg > /dev/null
    echo "deb [signed-by=/usr/share/keyrings/anydesk.gpg] http://deb.anydesk.com/ all main" | sudo tee /etc/apt/sources.list.d/anydesk-stable.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y anydesk
}

function InstallMkcert() {
    sudo apt-get install -y libnss3-tools
    wget https://github.com/FiloSottile/mkcert/releases/download/v1.4.4/mkcert-v1.4.4-linux-amd64 -O mkcert
    sudo cp mkcert /usr/local/bin/mkcert
    sudo chmod +x --preserve-root /usr/local/bin/mkcert
    mkcert -install
}

function InstallMicro() {
    sudo chmod -R 777 --preserve-root /usr/local/bin
    cd /usr/local/bin
    sudo curl https://getmic.ro | bash
}

function InstallBeyondCompare() {
    wget https://www.scootersoftware.com/files/bcompare-4.4.7.28397_amd64.deb
    sudo apt-get install -y ./bcompare-4.4.7.28397_amd64.deb
}

function InstallBashCompletion()
{
    grep -wq '^source /etc/profile.d/bash_completion.sh' ~/.bashrc || echo 'source /etc/profile.d/bash_completion.sh'>>~/.bashrc
    source /etc/profile.d/bash_completion.sh
    # complete -W 'Suggestion1 Suggestion2 Suggestion3' YourCommand

    if [ -f /etc/profile.d/bash_completion.sh ]; then
        Success "BashCompletion;$Check"
        UpdateBashCompletion
        return;
    fi

    Info "Installing BashCompletion ..."

    sudo apt install bash-completion -y

    Success "Installed BashCompletion"

    BashCompletionUpdate
}

function InstallMitmProxy()
{
    Warning "Installing MitmProxy ..."
}

function InstallInflect()
{
    pip install --break-system-packages inflect 1>/dev/null 2>&1

    Success "inflect; $Check"
}

function InstallHump()
{
    pip install --break-system-packages pyhumps 1>/dev/null 2>&1

    Success "pyhumps; $Check"
}

function InstallLineProfiler()
{
    sudo apt install python3-line-profiler 1>/dev/null 2>&1
}

InstallDnsmasq() {
    sudo apt install dnsmasq -y
    sudo systemctl stop systemd-resolved
    sudo systemctl disable systemd-resolved
    sudo systemctl restart dnsmasq
}

InstallSafeEye() {
    sudo add-apt-repository ppa:safeeyes-team/safeeyes -y
    sudo apt-get update
    sudo apt-get install safeeyes -y
}

InstallStrechly() {
    wget -q --show-progress $(curl -s https://api.github.com/repos/hovancik/stretchly/releases/latest | grep "browser_download_url.*amd64.deb" | cut -d : -f 2,3 | tr -d \")
    debFiles=$(ls stretchly*.deb)
    sudo dpkg -i $debFiles
    sudo apt-get install -f -y
}

InstallWarp() {
    curl https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list
    sudo apt update
    sudo apt install cloudflare-warp -y
}

function ConfigureNginx()
{
    sudo sed -i 's/#\s*server_names_hash_bucket_size\s*\d+;$/	server_names_hash_bucket_size 512;/g' /etc/nginx/nginx.conf

    # Success "Nginx configured"
}

function RegisterHolismCommands()
{
    if ( grep -nr HolismHolding /etc/bash.bashrc 1>/dev/null ); then
        Success "Holism commands;$Check"
        return;
    fi

    Info "Registering Holism Commands ..."

    sudo chmod 777 --preserve-root /etc/bash.bashrc
    sudo echo 'PATH="${PATH}:/HolismHolding/Commands"' >> /etc/bash.bashrc

    Success "Registered Holism Commands"
}

function SetDockerPermissions()
{
    Info "Setting docker permissions ... "

    sudo gpasswd -a $USER docker
    newgrp docker
    sudo groupadd docker
    sudo usermod -aG docker ${USER}
    sudo usermod -aG docker $USER

    Success "Set docker permissions"
}

function DownloadVsCodeExtensions()
{
    if [ -f /Temp/Extensions/CSharp.vsix ]; then
        Success "CSharp extension;$Check"
    else

        Info "Downloading C# VS Code extension ... "

        sudo rm -rf /Temp/Extensions/CSharp.vsix /Temp/Extensions/DotNetInstallTool.vsix
        sudo chmod -R 777 --preserve-root /Temp/Extensions
        sudo mkdir -p /Temp/Extensions
        find /Temp -maxdepth 1 -name "*vspackage?target*" | xargs rm -rf
        ua="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1"
        latestCSharpVersion=$(curl -s https://api.github.com/repos/dotnet/vscode-csharp/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
        latestCSharpVersion="${latestCSharpVersion#v}"
        echo "C# Extension Version: $latestCSharpVersion"
        if [[ "$latestCSharpVersion" == "" ]]; then
            echo "Error: C# VS Code extension's latest version could not be found."
            exit 1
        fi
        sudo wget --save-cookies cookies.txt --keep-session-cookies https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp
        sudo wget -U "$ua" --load-cookies cookies.txt https://marketplace.visualstudio.com/_apis/public/gallery/publishers/ms-dotnettools/vsextensions/csharp/$latestCSharpVersion/vspackage?targetPlatform=linux-x64
        sudo mv vspackage\?targetPlatform\=linux-x64 CSharp.gz
        sudo gunzip -v CSharp.gz
        sudo mv CSharp CSharp.vsix
        sudo mv CSharp.vsix /Temp/Extensions/
        sudo rm -rf /Temp/Extensions/DotNetInstallTool.vsix
        sudo chmod -R 777 --preserve-root /Temp/Extensions
        sudo mkdir -p /Temp/Extensions
        find /Temp -maxdepth 1 -name "*vspackage?target*" | xargs rm -rf
        ua="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1"
        rawMetadata=$(curl -s -X POST -H "Content-Type: application/json" -H "Accept: application/json;api-version=3.0-preview.1" https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery -d '{"filters":[{"criteria":[{"filterType":7,"value":"ms-dotnettools.vscode-dotnet-runtime"}],"pageNumber":1,"pageSize":1,"sortBy":0,"sortOrder":0}],"assetTypes":[],"flags":514}')
        netInstallToolVersion=$(echo "$rawMetadata" | jq -r '.results[0].extensions[0].versions[0].version')
        echo ".NET Install Tool Extension Version: $netInstallToolVersion"
        if [[ "$netInstallToolVersion" == "" || "$netInstallToolVersion" == "null" ]]; then
            echo "Error: No compatible .NET Install Tool VS Code extension version found."
            exit 1
        fi
        sudo wget --save-cookies cookies.txt --keep-session-cookies https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.vscode-dotnet-runtime
        sudo wget -U "$ua" --load-cookies cookies.txt https://marketplace.visualstudio.com/_apis/public/gallery/publishers/ms-dotnettools/vsextensions/vscode-dotnet-runtime/$netInstallToolVersion/vspackage
        sudo mv vspackage DotNetInstallTool.gz
        sudo gunzip -v DotNetInstallTool.gz
        sudo mv DotNetInstallTool DotNetInstall.vsix
        sudo mv DotNetInstall.vsix /Temp/Extensions/
        sudo chmod -R 777 --preserve-root /Temp/Extensions
        echo "Extensions downloaded and saved to /Temp/Extensions."

        Success "Downloaded C# VS Code extension "
    fi
}

function GiveAccessToRoot()
{
    if [ -f ~/.ssh/id_ed25519 ]; then
        sudo mkdir -p /root/.ssh
        sudo ln -f -s ~/.ssh/id_ed25519 /root/.ssh/id_ed25519
        sudo ln -f -s ~/.ssh/id_ed25519.pub /root/.ssh/id_ed25519.pub
        sudo ln -f -s ~/.ssh/known_hosts /root/.ssh/known_hosts
    fi
}

function TestGitHubAccess()
{
    if [[ $(ssh -T git@github.com) == *"You've successfully authenticated"* ]]; then
        Success "GitHub SSH;$Check"
    else
        Error "GitHub SSH not valid"
    fi
}

function AddPersianInputSource()
{
    if [[ $( gsettings get org.gnome.desktop.input-sources sources | grep ir ) ]]; then
        Success "Persian;$Check"
        return;
    fi

    Info "Adding Persian ..."

    gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'us'), ('xkb', 'ir')]"

    Success "Added Persian"
}

function SetLocaleToEnglishUs()
{
    if [[ $( locale | grep LANG=en_US.UTF-8 ) ]] && [[ $( gsettings get org.gnome.system.locale region ) == 'en_US.UTF-8' ]]; then
        Success "US English locale;$Check"
        return;
    fi

    sudo update-locale LANG=en_US.UTF-8
    gsettings set org.gnome.system.locale region 'en_US.UTF-8'
    dbus-send --print-reply --system --dest=org.freedesktop.Accounts /org/freedesktop/Accounts/User$UID org.freedesktop.Accounts.User.SetFormatsLocale string:'en_US.UTF-8' 1>/dev/null

    Success "Set locale to US English"
}

function ConfigureKeyboard()
{
    gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 40
    gsettings set org.gnome.desktop.peripherals.keyboard delay 250

    Success "Configured the keyboard"
}

function SetFavoriteApps()
{
    gsettings set org.gnome.shell favorite-apps "['org.gnome.Nautilus.desktop', 'google-chrome.desktop', 'code.desktop', 'org.gnome.Terminal.desktop', 'org.gnome.gedit.desktop']"
}

function SetChromeAsTheDefaultBrowser()
{
    sudo update-alternatives --install /usr/bin/x-www-browser x-www-browser /usr/bin/google-chrome 500 1>/dev/null
    sudo update-alternatives --set x-www-browser /usr/bin/google-chrome 1>/dev/null

    Success "Set Chrome as the default browser"
}

function DisableWayland()
{
    sudo sed -i 's/#\s*WaylandEnable\s*=.*$/WaylandEnable=false/g' /etc/gdm3/custom.conf
    sudo sed -i 's/#\s*AutomaticLoginEnable\s*=.*$/AutomaticLoginEnable=true/g' /etc/gdm3/custom.conf
    sudo sed -i 's/#\s*AutomaticLogin\s*=.*$/AutomaticLogin=$USERNAME/g' /etc/gdm3/custom.conf

    Success "Disabled Wayland"
}

function SetAppsToOpenMaximized()
{
    if ( which devilspie2 1>/dev/null ); then
        Success "devilspie2;$Check"
    else
        sudo apt install devilspie2 -y
    fi

    mkdir -p ~/.config/devilspie2

    if [ ! -s ~/.config/devilspie2/maximize.lua ]; then
        wget https://raw.githubusercontent.com/HolismHolding/Setup/main/Maximize -O ~/.config/devilspie2/maximize.lua
    fi

    if [ ! -d ~/.config/autostart ]; then
        mkdir ~/.config/autostart
    fi

    if [ ! -s ~/.config/autostart/devilspie2.desktop ]; then
        wget https://raw.githubusercontent.com/HolismHolding/Setup/main/Autostart -O ~/.config/autostart/devilspie2.desktop
    fi

    Success "Configured apps to be opened maximized"
}

function PreventAutoHideTheDock()
{
    gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed true
    Success "Configured Fixed dock"
}

function IncreaseLimits()
{
    # sysctl fs.inotify
    sudo sysctl fs.inotify.max_user_instances=8192 1>/dev/null
    sudo sed -i 's/^.*DefaultLimitNOFILE=.*$/DefaultLimitNOFILE=65536/g' /etc/systemd/system.conf
    sudo sed -i 's/^.*DefaultLimitNOFILE=.*$/DefaultLimitNOFILE=65536/g' /etc/systemd/user.conf

    Success "Increased Limits"
}

function CloneInfra()
{
    if [ ! -d /HolismHolding ]; then
        Clone HolismHolding
    fi
}

function PullImages()
{
    if ( docker image ls | grep site 1>/dev/null ); then
        Success "holism/site;$Check"
    else
        Info "Getting holism/site"
        docker pull holism/site
    fi

    if IsFullStackDeveloper;
    then
        if ( docker image ls | grep api 1>/dev/null ); then
            Success "holism/api;$Check"
        else
            Info "Getting holism/api"
            docker pull holism/api
        fi

        if ( docker image ls | grep mariadb 1>/dev/null ); then
        Success "mariadb;$Check"
        else
            Info "Getting mariadb"
            docker pull mariadb
        fi

        if ( docker image ls | grep panel 1>/dev/null ); then
            Success "holism/panel;$Check"
        else
            Info "Getting holism/panel"
            docker pull holism/panel
        fi

        if ( docker image ls | grep adminer 1>/dev/null ); then
            Success "adminer;$Check"
        else
            Info "Getting adminer"
            docker pull adminer
        fi
    fi
}

function SetDeveloperRole()
{
    if ! [ "$( cat /etc/bash.bashrc | grep DeveloperRole )" ];
    then
        Divide
        Info "What is your role as a developer? (If you are a front-end developer, press Enter)"
        Divide
        read Role
        if [ $Role ]; then
            echo "export DeveloperRole='$Role' " >> /etc/bash.bashrc
        else
            echo "export DeveloperRole='FrontEnd' " >> /etc/bash.bashrc
        fi
    fi
}

function PreventDimmingAndSleeping()
{
    gsettings set org.gnome.settings-daemon.plugins.power ambient-enabled false
    gsettings set org.gnome.settings-daemon.plugins.power idle-dim false
    gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 0
    gsettings set org.gnome.desktop.session idle-delay 0
    Success "Configured the power saving options"
}

function PreventMultiWorkspaces()
{
    gsettings set org.gnome.mutter dynamic-workspaces false
    gsettings set org.gnome.desktop.wm.preferences num-workspaces 1
    Success "Disabled multi-workspaces"
}

function TurnOffAutomaticScreenLock()
{
    gsettings set org.gnome.desktop.screensaver lock-enabled false
    Success "Disabled Automatic Screen Lock"
}

function SetThousandsSeparatorToCalculator()
{
    gsettings set org.gnome.calculator show-thousands true
    Success "Configured the Calculator thousand separator"
}

function SetTimeZone()
{
    if ( timedatectl | grep "Asia/Tehran" 1>/dev/null ); then
        Success "Time Zone;$Check"
        return;
    fi
    timedatectl set-timezone Asia/Tehran
    Success "Configured Time Zone"
}

function SetInstallationDate() {
    if [[ -f /InstallationDate ]]; then
        return 0
    fi

    date +%s | sudo tee /InstallationDate > /dev/null
}

ConfigurePythonCore() {
    scriptsPath="/HolismHolding/Scripts/Python"
    sitePackages=$(python3 -m site --user-site)
    mkdir -p "$sitePackages"
    echo "$scriptsPath" > "$sitePackages/holism.pth"
    Success "Configured Python core path"
}

ConfigureDockerForUser() {
    sudo mkdir -p ~/.docker
    sudo chown -R $(whoami):$(whoami) ~/.docker
}

# SetDeveloperRole

sudo echo ""
cd /Temp
Divide
Info "Holism Installation"
Divide
ConfigureApt
Install curl
Install google-chrome InstallChrome
Install code InstallVsCode
InstallVsCodeExtensionRemoteContainers
InstallVsCodeExtensionCodeSpellChecker
Install git InstallGit
Install gh InstallGitHubCli
Install docker InstallDocker
Install rustdesk InstallRustDesk
Install anydesk InstallAnydesk
Install simplescreenrecorder
Install nginx
Install telnet
Install mkcert InstallMkcert
Install micro InstallMicro
Install trans translate-shell
Install bcompare InstallBeyondCompare
Install sshd openssh-server
Install http httpie
Install pip python3-pip
Install nmap
Install jq
Install cloc
Install progress
Install rename
Install parallel
Install baobab
Install dconf-editor

# Install dnsmasq InstallDnsmasq
Install safeeyes InstallSafeEye
# Install stretchly InstallStrechly
# Install warp-cli InstallWarp

InstallBashCompletion
InstallMitmProxy
InstallInflect
InstallHump
InstallLineProfiler
SetInstallationDate

# if IsFullStackDeveloper; then
#     DownloadVsCodeExtensions
# fi

ConfigureNginx
RegisterHolismCommands

GiveAccessToRoot
# TestGitHubAccess
AddPersianInputSource
SetLocaleToEnglishUs
ConfigureKeyboard
SetFavoriteApps
SetChromeAsTheDefaultBrowser
DisableWayland
SetAppsToOpenMaximized
PreventAutoHideTheDock
IncreaseLimits
PreventDimmingAndSleeping
PreventMultiWorkspaces
TurnOffAutomaticScreenLock
SetThousandsSeparatorToCalculator
SetTimeZone
ConfigurePythonCore
if [[ -d /HolismHolding/Commands/ConfigVsCode ]]; then
    /HolismHolding/Commands/ConfigVsCode
fi

CloneInfra
# PullImages

Divide

# SetDockerPermissions
# Warning "IMPORTANT => RESTART YOUR SYSTEM"

Divide
